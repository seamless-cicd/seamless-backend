generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ResourceType {
  PIPELINE
  SERVICE
  RUN
  STAGE
  OTHER
}

enum Status {
  SUCCESS
  FAILURE
  IN_PROGRESS
  IDLE
  AWAITING_APPROVAL
}

enum TriggerType {
  MAIN
  PR_OPEN
  PR_SYNC
}

enum StageType {
  PREPARE
  CODE_QUALITY
  UNIT_TEST
  BUILD
  INTEGRATION_TEST
  DEPLOY_STAGING
  DEPLOY_PROD
  OTHER
}

model Pipeline {
  id                   String    @id @default(uuid())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  name                 String?
  awsEcsCluster        String
  awsEcsClusterStaging String?
  githubClientId       String
  githubClientSecret   String
  githubOauthToken     String?
  services             Service[]
}

model Service {
  id                     String    @id @default(uuid())
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  name                   String?
  lastRunAt              DateTime?
  awsEcsService          String
  awsEcsServiceStaging   String?
  triggerOnMain          Boolean   @default(true)
  triggerOnPrOpen        Boolean   @default(false)
  triggerOnPrSync        Boolean   @default(false)
  useStaging             Boolean   @default(false)
  autoDeploy             Boolean   @default(false)
  githubRepoUrl          String
  unitTestCommand        String?
  integrationTestCommand String?
  codeQualityCommand     String?
  dockerfilePath         String    @default(".")
  dockerComposeFilePath  String?
  Pipeline               Pipeline? @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  pipelineId             String?
  runs                   Run[]

  @@index([pipelineId])
}

model Run {
  id            String      @id @default(uuid())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  startedAt     DateTime    @default(now())
  endedAt       DateTime?
  duration      Int? // Seconds
  commitHash    String?
  commitMessage String?
  committer     String?
  status        Status      @default(IDLE)
  triggerType   TriggerType
  Service       Service?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId     String?
  stages        Stage[]

  @@index([serviceId])
}

model Stage {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  type      StageType
  startedAt DateTime?
  endedAt   DateTime?
  duration  Int?
  status    Status    @default(IDLE)
  Run       Run?      @relation(fields: [runId], references: [id], onDelete: Cascade)
  runId     String?

  @@index([runId])
}
