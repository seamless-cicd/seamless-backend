import { z } from 'zod';
import {
  StageTypeSchema,
  StatusSchema,
  TriggerTypeSchema,
} from '../../../prisma/generated/schemas';

// Use Zod schemas generated by prisma-zod-generator
const StageIdsSchema = z.object({
  prepare: z.string().uuid(),
  codeQuality: z.string().uuid(),
  unitTest: z.string().uuid(),
  build: z.string().uuid(),
  integrationTest: z.string().uuid().optional(),
  deployStaging: z.string().uuid().optional(),
  deployProduction: z.string().uuid(),
});

type StageIds = z.infer<typeof StageIdsSchema>;

const StageSchema = z.object({
  id: z.string().uuid(),
  type: StageTypeSchema,
  status: StatusSchema,
});

type Stage = z.infer<typeof StageSchema>;

const RunDataSchema = z.object({
  status: StatusSchema,
  commitHash: z.string(),
  commitMessage: z.string(),
  committer: z.string(),
  triggerType: TriggerTypeSchema,
  stages: z.object({
    prepare: StageSchema,
    codeQuality: StageSchema,
    unitTest: StageSchema,
    build: StageSchema,
    integrationTest: StageSchema.optional(),
    deployStaging: StageSchema.optional(),
    deployProduction: StageSchema,
  }),
});

const ContainerVariablesSchema = z.object({
  awsRegion: z.string(),
  awsAccountId: z.string(),
  awsAccessKey: z.string(),
  awsSecretAccessKey: z.string(),
  githubPat: z.string(),
  githubRepoUrl: z.string().url(),
  codeQualityCommand: z.string(),
  unitTestCommand: z.string(),
  dockerfilePath: z.string(),
  awsEcsCluster: z.string(),
  awsEcsService: z.string(),
  awsEcrRepo: z.string(),
  logSubscriberUrl: z.string().url(),
});

// Schema for validating the input data required for the Step Function to run
const SfnInputSchema = z.object({
  serviceId: z.string().uuid(),
  runId: z.string().uuid(),
  stageIds: StageIdsSchema,
  runData: RunDataSchema,
  runFull: z.boolean(),
  autoDeploy: z.boolean(),
  containerVariables: ContainerVariablesSchema,
});

type SfnInput = z.infer<typeof SfnInputSchema>;

export { SfnInputSchema, SfnInput, StageIds, Stage };
